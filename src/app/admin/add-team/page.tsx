
'use client';

import * as React from 'react';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useRouter } from 'next/navigation';

import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { PageHeader } from '@/components/shared/page-header';
import { useToast } from '@/hooks/use-toast';
import { TeamSchema, PlayerSchema } from '@/types';
import { PlusCircle, Trash2, UsersPlus } from 'lucide-react';
import { Separator } from '@/components/ui/separator';

// Schema for creating a player (ID is generated by the API)
const CreatePlayerFormSchema = PlayerSchema.omit({ id: true });
type CreatePlayerFormValues = z.infer<typeof CreatePlayerFormSchema>;

// Schema for creating a team (ID is generated by the API)
// Roster will be an array of players to be created
const CreateTeamFormSchema = TeamSchema.omit({ id: true, roster: true }).extend({
  roster: z.array(CreatePlayerFormSchema).min(1, "At least one player is required in the roster."),
});
type CreateTeamFormValues = z.infer<typeof CreateTeamFormSchema>;

export default function AddTeamPage() {
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<CreateTeamFormValues>({
    resolver: zodResolver(CreateTeamFormSchema),
    defaultValues: {
      name: '',
      logoUrl: '',
      description: '',
      roster: [{ name: '', ign: '', role: '' }], // Start with one player entry
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: 'roster',
  });

  async function onSubmit(data: CreateTeamFormValues) {
    try {
      const response = await fetch('/api/teams', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to create team');
      }

      toast({
        title: 'Success!',
        description: 'Team added successfully.',
      });
      form.reset({
        name: '',
        logoUrl: '',
        description: '',
        roster: [{ name: '', ign: '', role: '' }],
      });
      // router.push('/teams'); // Optional: redirect after success
    } catch (error) {
      let errorMessage = 'An unexpected error occurred.';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive',
      });
    }
  }

  return (
    <div className="space-y-8">
      <PageHeader
        title="Add New Team"
        description="Fill in the details below to add a new BGMI team and its roster."
      />
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Team Name</FormLabel>
                <FormControl>
                  <Input placeholder="Enter team name" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="logoUrl"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Team Logo URL (Optional)</FormLabel>
                <FormControl>
                  <Input placeholder="https://example.com/team-logo.png" {...field} value={field.value ?? ''} />
                </FormControl>
                <FormDescription>
                  Enter the full URL for the team&apos;s logo.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="description"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Team Description (Optional)</FormLabel>
                <FormControl>
                  <Textarea
                    placeholder="Brief description of the team"
                    {...field}
                    value={field.value ?? ''}
                    rows={3}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <Separator />
          
          <div>
            <h3 className="text-lg font-medium mb-2">Team Roster</h3>
            {fields.map((item, index) => (
              <div key={item.id} className="space-y-4 p-4 border rounded-md mb-4 relative">
                <h4 className="font-semibold">Player {index + 1}</h4>
                <FormField
                  control={form.control}
                  name={`roster.${index}.name`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Player Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter player's real name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name={`roster.${index}.ign`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>In-Game Name (IGN)</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter player's IGN" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name={`roster.${index}.role`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Role (Optional)</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., IGL, Assaulter, Support" {...field} value={field.value ?? ''} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {fields.length > 1 && (
                  <Button
                    type="button"
                    variant="destructive"
                    size="sm"
                    onClick={() => remove(index)}
                    className="absolute top-2 right-2"
                  >
                    <Trash2 className="h-4 w-4 mr-1" /> Remove Player
                  </Button>
                )}
              </div>
            ))}
            <FormMessage>{form.formState.errors.roster?.root?.message || form.formState.errors.roster?.message}</FormMessage>
            <Button
              type="button"
              variant="outline"
              onClick={() => append({ name: '', ign: '', role: '' })}
              className="mt-2"
            >
              <PlusCircle className="mr-2 h-4 w-4" /> Add Player to Roster
            </Button>
          </div>

          <Button type="submit" disabled={form.formState.isSubmitting} className="bg-accent hover:bg-accent/90 text-accent-foreground">
            {form.formState.isSubmitting ? 'Adding Team...' : (
              <>
                <UsersPlus className="mr-2 h-5 w-5" /> Add Team
              </>
            )}
          </Button>
        </form>
      </Form>
    </div>
  );
}
